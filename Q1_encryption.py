# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A1zsTWqEDcJMxFqNHlyFqRur1CtlGodh
"""

from google.colab import files
uploaded = files.upload()

def encrypt_char(c, n, m):
    if 'a' <= c <= 'm':
        return chr((ord(c) - ord('a') + (n * m)) % 13 + ord('a'))
    elif 'n' <= c <= 'z':
        return chr((ord(c) - ord('n') - (n + m)) % 13 + ord('n'))
    elif 'A' <= c <= 'M':
        return chr((ord(c) - ord('A') - n) % 13 + ord('A'))
    elif 'N' <= c <= 'Z':
        return chr((ord(c) - ord('N') + (m ** 2)) % 13 + ord('N'))
    else:
        return c  # Leave non-alphabetic characters unchanged


def decrypt_char(c, n, m):
    if 'a' <= c <= 'm':
        return chr((ord(c) - ord('a') - (n * m)) % 13 + ord('a'))
    elif 'n' <= c <= 'z':
        return chr((ord(c) - ord('n') + (n + m)) % 13 + ord('n'))
    elif 'A' <= c <= 'M':
        return chr((ord(c) - ord('A') + n) % 13 + ord('A'))
    elif 'N' <= c <= 'Z':
        return chr((ord(c) - ord('N') - (m ** 2)) % 13 + ord('N'))
    else:
        return c


def encrypt(text, n, m):
    return ''.join(encrypt_char(c, n, m) for c in text)


def decrypt(text, n, m):
    return ''.join(decrypt_char(c, n, m) for c in text)


def verify(original, decrypted):
    return original == decrypted


def read_file(filepath):
    try:
        with open(filepath, encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"Error: File '{filepath}' not found.")
        return None


def write_file(filepath, content):
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)


def main():
    try:
        n = int(input('Enter integer n: '))
        m = int(input('Enter integer m: '))
    except ValueError:
        print("Error: Please enter valid integers for n and m.")
        return

    raw_text = read_file('raw_text.txt')
    if raw_text is None:
        return

    encrypted_text = encrypt(raw_text, n, m)
    write_file('encrypted_text.txt', encrypted_text)

    decrypted_text = decrypt(encrypted_text, n, m)

    print("Decryption Correct:", verify(raw_text, decrypted_text))
    print("\nDecrypted Text:\n")
    print(decrypted_text)


if __name__ == '__main__':
    main()